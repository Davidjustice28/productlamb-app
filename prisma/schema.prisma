generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id               Int                  @id @default(autoincrement())
  dateCreated      DateTime
  subscriptionType String
  status           String
  user_prisma_id   String
  organization_id  String @default("1")
  applications     AccountApplication[]
  isSetup Boolean
  darkMode Boolean @default(false)
  timezone String @default("America/Denver")
  user AccountUser[]
}

model AccountApplication {
  id                 Int                             @id @default(autoincrement())
  name               String
  summary            String
  archived           Boolean
  siteUrl            String?
  type               String
  accountId          Int
  logo_url           String?
  sprint_generation_enabled Boolean
  sprint_interval String @default("weekly")
  clickup_integration ApplicationClickupIntegration? @relation(fields: [clickup_integration_id], references: [id], onDelete: Cascade)
  clickup_integration_id Int? @unique
  notion_integration  ApplicationNotionIntegration? @relation(fields: [notion_integration_id], references: [id], onDelete: Cascade)
  notion_integration_id Int? @unique
  lastSprintCheck String?
  google_integration ApplicationGoogleIntegration? @relation(fields: [google_integration_id], references: [id], onDelete: Cascade)
  google_integration_id Int?  @unique
  account            Account                         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  bugs               ApplicationBug[]
  feedback           ApplicationFeedback[]
  goals              ApplicationGoal[]
  integrations       ApplicationIntegration[]
  sprints            ApplicationSprint[]
  initiatives        GeneratedInitiative[]
  tasks              GeneratedTask[]
  notes              ApplicationNote[]
  suggestions        ApplicationSuggestion[]
}

model ApplicationGoal {
  id            Int                @id @default(autoincrement())
  goal          String
  isLongTerm    Boolean
  applicationId Int
  application   AccountApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model ApplicationFeedback {
  id            Int                @id @default(autoincrement())
  applicationId Int
  feedback      String
  source        String
  feedbackDate  String
  ignored       Boolean           @default(false)
  application   AccountApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model GeneratedInitiative {
  id            Int                @id @default(autoincrement())
  description   String
  applicationId Int
  application   AccountApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  sprint        ApplicationSprint  @relation(fields: [sprintId], references: [id])
  sprintId      Int 
  tasks         GeneratedTask[]
}

model ApplicationIntegration {
  id                   Int                @id @default(autoincrement())
  applicationId        Int
  name                 String
  secret               String
  secretExpirationDate String?
  metadata             String?
  application          AccountApplication @relation(fields: [applicationId], references: [id])
  enabled              Boolean            @default(true)
}

model GeneratedTask {
  id            Int                 @id @default(autoincrement())
  applicationId Int
  sprintId      Int?
  title         String
  status        String
  points        Int?
  description   String
  initiativeId  Int?
  reason        String
  category         String
  notion_id     String?
  clickup_id    String?
  backlog Boolean?
  application   AccountApplication  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  initiative    GeneratedInitiative? @relation(fields: [initiativeId], references: [id])
  sprint        ApplicationSprint?   @relation(fields: [sprintId], references: [id])
}

model ApplicationSprint {
  id             Int                  @id @default(autoincrement())
  applicationId  Int
  startDate      String?
  endDate        String?
  application    AccountApplication   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  initiative     GeneratedInitiative[]
  status         String
  notion_sprint_id String?
  clickup_sprint_id String?
  selectedInitiative Int?
  generatedTasks GeneratedTask[]
}

model ApplicationBug {
  id            Int                @id @default(autoincrement())
  applicationId Int
  title         String
  description   String
  priority      String
  reported_date String?
  source        String
  application   AccountApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model ApplicationClickupIntegration {
  id            Int                @id @default(autoincrement())
  applicationId Int
  api_token        String
  parent_folder_id BigInt
  application AccountApplication?
}

model ApplicationNotionIntegration {
  id            Int                @id @default(autoincrement())
  applicationId Int
  api_token        String
  parent_page_id String
  sprints_page_id String?
  application   AccountApplication?
}

model ApplicationNote {
  id            Int                @id @default(autoincrement())
  applicationId Int
  text       String
  dateCreated String
  application   AccountApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model ApplicationSuggestion {
  id            Int                @id @default(autoincrement())
  suggestion    String
  applicationId Int
  application   AccountApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model ApplicationGoogleIntegration {
  id            Int                @id @default(autoincrement())
  access_token  String
  refresh_token String
  applicationId Int
  application   AccountApplication?
}

model AccountUser {
  id        Int      @id @default(autoincrement())
  accountId Int?
  userId    String
  account   Account?  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  darkMode Boolean @default(false)
}