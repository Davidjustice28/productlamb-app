generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                         Int                  @id @default(autoincrement())
  dateCreated                DateTime
  subscriptionType           String
  status                     String
  user_prisma_id             String
  isSetup                    Boolean
  move_incomplete_to_backlog Boolean              @default(true)
  organization_id            String               @default("1")
  timezone                   String               @default("America/Denver")
  default_application_id     Int?
  AccountApplication         AccountApplication[]
  AccountUser                AccountUser[]
}

model AccountApplication {
  id                                                                                          Int                            @id @default(autoincrement())
  name                                                                                        String
  summary                                                                                     String
  archived                                                                                    Boolean
  siteUrl                                                                                     String?
  type                                                                                        String
  accountId                                                                                   Int
  logo_url                                                                                    String?
  clickup_integration_id                                                                      Int?                           @unique
  google_integration_id                                                                       Int?                           @unique
  jira_integration_id                                                                         Int?                           @unique
  lastSprintCheck                                                                             String?
  notion_integration_id                                                                       Int?                           @unique
  sprint_generation_enabled                                                                   Boolean
  sprint_interval                                                                             String                         @default("weekly")
  github_integration_id                                                                       Int?                           @unique
  Account                                                                                     Account                        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  ApplicationClickupIntegration                                                               ApplicationClickupIntegration? @relation(fields: [clickup_integration_id], references: [id], onDelete: Cascade)
  ApplicationGoogleIntegration                                                                ApplicationGoogleIntegration?  @relation(fields: [google_integration_id], references: [id], onDelete: Cascade)
  ApplicationJiraIntegration                                                                  ApplicationJiraIntegration?    @relation(fields: [jira_integration_id], references: [id], onDelete: Cascade)
  ApplicationNotionIntegration                                                                ApplicationNotionIntegration?  @relation(fields: [notion_integration_id], references: [id], onDelete: Cascade)
  ApplicationBug                                                                              ApplicationBug[]
  ApplicationDocuments                                                                        ApplicationDocuments[]
  ApplicationFeedback                                                                         ApplicationFeedback[]
  ApplicationGithubIntegration_ApplicationGithubIntegration_applicationidToAccountApplication ApplicationGithubIntegration?  @relation("ApplicationGithubIntegration_applicationidToAccountApplication")
  ApplicationGoal                                                                             ApplicationGoal[]
  ApplicationIntegration                                                                      ApplicationIntegration[]
  ApplicationRoadmap                                                                          ApplicationRoadmap[]
  ApplicationSprint                                                                           ApplicationSprint[]
  ApplicationSuggestion                                                                       ApplicationSuggestion[]
  GeneratedInitiative                                                                         GeneratedInitiative[]
  GeneratedTask                                                                               GeneratedTask[]
}

model AccountManagerSettings {
  id                       Int     @id @default(autoincrement())
  accountId                Int
  timezone                 String  @default("America/Denver")
  incomplete_tasks_action  String  @default("backlog")
  notify_on_planning_ready Boolean @default(true)
  notify_on_sprint_ready   Boolean @default(true)
  notify_on_member_join    Boolean @default(true)
  notify_on_task_added     Boolean @default(true)
}

model AccountUser {
  id        Int      @id @default(autoincrement())
  accountId Int?
  userId    String
  darkMode  Boolean  @default(false)
  Account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model ApplicationBug {
  id                 Int                @id @default(autoincrement())
  applicationId      Int
  title              String
  description        String
  priority           String
  source             String
  reported_date      String?
  AccountApplication AccountApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model ApplicationClickupIntegration {
  id                 Int                 @id @default(autoincrement())
  applicationId      Int
  api_token          String
  parent_folder_id   BigInt
  AccountApplication AccountApplication?
}

model ApplicationFeedback {
  id                 Int                @id @default(autoincrement())
  applicationId      Int
  feedback           String
  source             String
  feedbackDate       String
  ignored            Boolean            @default(false)
  AccountApplication AccountApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model ApplicationGoal {
  id                 Int                @id @default(autoincrement())
  goal               String
  isLongTerm         Boolean
  applicationId      Int
  AccountApplication AccountApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model ApplicationGoogleIntegration {
  id                 Int                 @id @default(autoincrement())
  access_token       String
  refresh_token      String
  applicationId      Int
  AccountApplication AccountApplication?
}

model ApplicationIntegration {
  id                   Int                @id @default(autoincrement())
  applicationId        Int
  name                 String
  secret               String
  secretExpirationDate String?
  metadata             String?
  enabled              Boolean            @default(true)
  AccountApplication   AccountApplication @relation(fields: [applicationId], references: [id])
}

model ApplicationNotionIntegration {
  id                 Int                 @id @default(autoincrement())
  applicationId      Int
  api_token          String
  parent_page_id     String
  sprints_page_id    String?
  AccountApplication AccountApplication?
}

model ApplicationSprint {
  id                    Int                   @id @default(autoincrement())
  applicationId         Int
  startDate             String?
  endDate               String?
  clickup_sprint_id     String?
  is_generating         Boolean               @default(false)
  jira_sprint_id        String?
  notion_sprint_id      String?
  selectedInitiative    Int?
  status                String
  using_github_projects Boolean?
  AccountApplication    AccountApplication    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  GeneratedInitiative   GeneratedInitiative[]
  GeneratedTask         GeneratedTask[]
}

model ApplicationSuggestion {
  id                 Int                @id @default(autoincrement())
  suggestion         String
  applicationId      Int
  AccountApplication AccountApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model GeneratedInitiative {
  id                 Int                @id @default(autoincrement())
  description        String
  applicationId      Int
  sprintId           Int
  AccountApplication AccountApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  ApplicationSprint  ApplicationSprint  @relation(fields: [sprintId], references: [id])
  GeneratedTask      GeneratedTask[]
}

model GeneratedTask {
  id                  Int                  @id @default(autoincrement())
  applicationId       Int
  sprintId            Int?
  title               String
  status              String
  points              Int?
  description         String
  initiativeId        Int?
  reason              String
  backlog             Boolean?
  category            String
  clickup_id          String?
  notion_id           String?
  jira_id             String?
  github_id           String?              @db.VarChar(255)
  AccountApplication  AccountApplication   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  GeneratedInitiative GeneratedInitiative? @relation(fields: [initiativeId], references: [id])
  ApplicationSprint   ApplicationSprint?   @relation(fields: [sprintId], references: [id])
}

model ApplicationJiraIntegration {
  id                 Int                 @id @default(autoincrement())
  applicationId      Int
  api_token          String
  parent_board_id    BigInt
  project_key        String
  host_url           String
  email              String
  AccountApplication AccountApplication?
}

model ApplicationDocuments {
  id                 Int                @id @default(autoincrement())
  applicationId      Int
  document_url       String             @db.VarChar(255)
  name               String             @default("") @db.VarChar(255)
  date_created       String             @default("") @db.VarChar(255)
  type               String             @default("") @db.VarChar(255)
  AccountApplication AccountApplication @relation(fields: [applicationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ApplicationRoadmap {
  id                     Int                @id @default(autoincrement())
  account_application_id Int
  AccountApplication     AccountApplication @relation(fields: [account_application_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roadmap_item           roadmap_item[]
}

model roadmap_item {
  id                 Int                @id @default(autoincrement())
  order              Int
  roadmap_id         Int
  initiative         String             @db.VarChar(255)
  description        String
  start_date         String             @db.VarChar(255)
  end_date           String             @db.VarChar(255)
  ApplicationRoadmap ApplicationRoadmap @relation(fields: [roadmap_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ApplicationGithubIntegration {
  id                                                                                Int                @id @default(autoincrement())
  applicationid                                                                     Int                @unique
  api_token                                                                         String             @db.VarChar(255)
  repo                                                                              String             @db.VarChar(255)
  owner                                                                             String             @db.VarChar(255)
  project_id                                                                        Int
  AccountApplication_ApplicationGithubIntegration_applicationidToAccountApplication AccountApplication @relation("ApplicationGithubIntegration_applicationidToAccountApplication", fields: [applicationid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_application_id")
}
